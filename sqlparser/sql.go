//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const GLOBAL = 57373
const ANY = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const TABLE = 57442
const INDEX = 57443
const VIEW = 57444
const TO = 57445
const IGNORE = 57446
const IF = 57447
const UNIQUE = 57448
const PRIMARY = 57449
const SHOW = 57450
const DESCRIBE = 57451
const EXPLAIN = 57452
const DATE = 57453
const ESCAPE = 57454
const REPAIR = 57455
const OPTIMIZE = 57456
const TRUNCATE = 57457
const MAXVALUE = 57458
const PARTITION = 57459
const REORGANIZE = 57460
const LESS = 57461
const THAN = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const TEXT = 57486
const TINYTEXT = 57487
const MEDIUMTEXT = 57488
const LONGTEXT = 57489
const BLOB = 57490
const TINYBLOB = 57491
const MEDIUMBLOB = 57492
const LONGBLOB = 57493
const JSON = 57494
const ENUM = 57495
const NULLX = 57496
const AUTO_INCREMENT = 57497
const APPROXNUM = 57498
const SIGNED = 57499
const UNSIGNED = 57500
const ZEROFILL = 57501
const DATABASES = 57502
const TABLES = 57503
const VITESS_KEYSPACES = 57504
const VITESS_SHARDS = 57505
const VSCHEMA_TABLES = 57506
const NAMES = 57507
const CHARSET = 57508
const CURRENT_TIMESTAMP = 57509
const DATABASE = 57510
const CURRENT_DATE = 57511
const CURRENT_TIME = 57512
const LOCALTIME = 57513
const LOCALTIMESTAMP = 57514
const UTC_DATE = 57515
const UTC_TIME = 57516
const UTC_TIMESTAMP = 57517
const REPLACE = 57518
const CONVERT = 57519
const CAST = 57520
const GROUP_CONCAT = 57521
const SEPARATOR = 57522
const MATCH = 57523
const AGAINST = 57524
const BOOLEAN = 57525
const LANGUAGE = 57526
const WITH = 57527
const QUERY = 57528
const EXPANSION = 57529
const UNUSED = 57530

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"GLOBAL",
	"ANY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 22,
	-2, 4,
	-1, 254,
	19, 218,
	32, 218,
	43, 218,
	44, 218,
	-2, 204,
	-1, 266,
	80, 574,
	109, 574,
	-2, 39,
	-1, 268,
	80, 596,
	109, 596,
	-2, 41,
	-1, 273,
	109, 473,
	-2, 469,
	-1, 274,
	109, 474,
	-2, 470,
	-1, 550,
	5, 22,
	-2, 420,
	-1, 554,
	19, 218,
	32, 218,
	43, 218,
	44, 218,
	-2, 205,
	-1, 585,
	109, 476,
	-2, 472,
	-1, 745,
	5, 23,
	-2, 297,
	-1, 837,
	5, 23,
	-2, 421,
	-1, 914,
	5, 22,
	-2, 423,
	-1, 986,
	5, 23,
	-2, 424,
}

const yyPrivate = 57344

const yyLast = 7715

var yyAct = [...]int{

	334, 38, 509, 856, 995, 726, 307, 624, 302, 588,
	265, 611, 735, 576, 383, 3, 274, 239, 922, 727,
	683, 382, 446, 584, 605, 333, 693, 233, 690, 44,
	799, 807, 891, 587, 660, 723, 254, 707, 597, 38,
	296, 305, 63, 564, 269, 356, 135, 244, 141, 135,
	276, 769, 259, 238, 362, 386, 620, 248, 640, 43,
	270, 255, 234, 235, 236, 237, 48, 399, 135, 135,
	1023, 1014, 638, 253, 135, 444, 1020, 1009, 1018, 1013,
	1008, 904, 953, 280, 861, 862, 863, 50, 51, 52,
	53, 972, 892, 864, 765, 604, 930, 978, 612, 140,
	644, 948, 946, 1017, 1015, 996, 789, 599, 286, 637,
	970, 287, 282, 125, 894, 126, 294, 998, 475, 474,
	484, 485, 477, 478, 479, 480, 481, 482, 483, 476,
	126, 452, 486, 599, 786, 896, 277, 900, 447, 895,
	788, 893, 135, 748, 135, 283, 898, 747, 135, 572,
	574, 128, 129, 130, 135, 897, 521, 634, 639, 632,
	899, 901, 759, 746, 278, 137, 293, 127, 498, 499,
	960, 938, 840, 811, 752, 508, 403, 291, 642, 645,
	692, 475, 474, 484, 485, 477, 478, 479, 480, 481,
	482, 483, 476, 870, 331, 486, 770, 476, 598, 612,
	486, 486, 636, 596, 595, 461, 971, 969, 464, 402,
	865, 906, 667, 463, 462, 708, 635, 823, 462, 800,
	61, 573, 708, 449, 598, 763, 665, 666, 664, 999,
	464, 787, 1007, 785, 464, 536, 537, 466, 641, 289,
	991, 601, 364, 871, 934, 38, 602, 933, 271, 643,
	479, 480, 481, 482, 483, 476, 778, 309, 486, 359,
	384, 477, 478, 479, 480, 481, 482, 483, 476, 135,
	777, 486, 358, 684, 465, 685, 135, 135, 135, 41,
	445, 63, 463, 462, 766, 445, 1002, 396, 981, 663,
	463, 462, 817, 932, 816, 776, 63, 869, 135, 464,
	135, 63, 858, 135, 495, 497, 135, 464, 135, 258,
	463, 462, 360, 1004, 295, 457, 964, 295, 818, 500,
	501, 502, 503, 504, 505, 506, 760, 464, 653, 655,
	656, 686, 507, 654, 443, 511, 512, 513, 514, 515,
	516, 517, 295, 520, 522, 522, 522, 522, 522, 522,
	522, 522, 530, 531, 532, 533, 463, 462, 288, 459,
	451, 961, 962, 908, 927, 926, 551, 463, 462, 277,
	259, 259, 259, 464, 259, 270, 538, 974, 63, 553,
	550, 805, 295, 135, 464, 384, 135, 135, 135, 973,
	135, 866, 259, 792, 793, 794, 45, 135, 577, 570,
	393, 135, 876, 875, 135, 577, 554, 270, 135, 135,
	873, 872, 698, 578, 839, 295, 698, 295, 540, 369,
	295, 63, 832, 580, 405, 404, 583, 589, 19, 613,
	614, 615, 555, 556, 400, 560, 805, 607, 608, 609,
	610, 369, 394, 575, 392, 581, 724, 835, 400, 400,
	626, 548, 617, 618, 619, 549, 592, 445, 369, 398,
	874, 805, 753, 19, 135, 534, 805, 245, 41, 135,
	606, 585, 135, 63, 398, 41, 539, 659, 625, 398,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 661, 622, 623, 38, 568,
	569, 523, 524, 525, 526, 527, 528, 529, 378, 368,
	41, 19, 511, 843, 41, 756, 621, 258, 374, 377,
	736, 737, 375, 63, 376, 379, 570, 616, 736, 737,
	628, 697, 648, 1016, 369, 55, 860, 63, 913, 779,
	687, 688, 739, 724, 322, 321, 324, 325, 326, 327,
	729, 455, 38, 323, 328, 270, 542, 124, 41, 725,
	712, 546, 496, 271, 743, 741, 730, 733, 63, 744,
	742, 563, 705, 565, 566, 728, 585, 847, 17, 716,
	715, 474, 484, 485, 477, 478, 479, 480, 481, 482,
	483, 476, 751, 846, 486, 271, 562, 754, 398, 398,
	1012, 740, 565, 566, 63, 561, 749, 378, 252, 791,
	589, 249, 250, 1011, 649, 721, 720, 374, 377, 767,
	768, 375, 363, 376, 379, 243, 699, 258, 258, 258,
	445, 258, 297, 771, 558, 758, 401, 361, 762, 710,
	993, 630, 258, 992, 298, 63, 63, 559, 445, 258,
	911, 398, 757, 833, 936, 454, 381, 246, 247, 782,
	363, 719, 240, 984, 63, 772, 773, 774, 241, 718,
	45, 983, 956, 577, 796, 797, 798, 484, 485, 477,
	478, 479, 480, 481, 482, 483, 476, 745, 957, 486,
	661, 931, 460, 700, 701, 47, 49, 704, 812, 795,
	391, 689, 42, 398, 1, 781, 557, 372, 633, 994,
	855, 711, 63, 713, 714, 709, 594, 586, 275, 54,
	593, 775, 968, 790, 929, 600, 722, 662, 764, 603,
	859, 990, 761, 408, 135, 409, 407, 411, 410, 406,
	138, 259, 380, 271, 822, 385, 732, 848, 849, 850,
	395, 806, 627, 56, 784, 783, 631, 135, 281, 494,
	695, 834, 717, 841, 264, 854, 919, 851, 731, 63,
	63, 535, 63, 63, 355, 852, 589, 845, 589, 982,
	955, 821, 398, 518, 706, 308, 652, 853, 320, 317,
	319, 318, 541, 547, 468, 306, 135, 300, 571, 257,
	135, 365, 373, 802, 371, 370, 63, 803, 262, 883,
	884, 738, 879, 734, 256, 831, 952, 814, 815, 867,
	868, 819, 997, 780, 398, 63, 825, 881, 826, 827,
	828, 829, 886, 259, 697, 889, 729, 545, 902, 915,
	887, 890, 398, 20, 332, 909, 836, 837, 838, 135,
	905, 903, 46, 914, 910, 912, 63, 63, 921, 918,
	63, 728, 251, 754, 16, 63, 63, 63, 924, 925,
	63, 15, 804, 14, 133, 13, 589, 232, 445, 585,
	24, 12, 928, 11, 10, 9, 820, 8, 7, 6,
	809, 937, 5, 4, 63, 242, 133, 133, 272, 18,
	2, 0, 133, 0, 944, 951, 0, 0, 0, 0,
	0, 0, 0, 0, 729, 0, 38, 941, 942, 958,
	943, 885, 662, 945, 0, 947, 0, 0, 0, 0,
	959, 967, 0, 0, 0, 0, 0, 975, 0, 728,
	0, 0, 0, 0, 63, 0, 0, 398, 398, 0,
	398, 857, 0, 935, 977, 63, 0, 0, 0, 0,
	979, 852, 0, 0, 270, 0, 0, 0, 985, 0,
	133, 0, 133, 0, 0, 0, 133, 63, 63, 0,
	0, 63, 133, 0, 880, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 299, 357, 809, 0, 0, 398, 939, 940, 1010,
	0, 0, 0, 63, 295, 0, 0, 0, 1019, 949,
	950, 0, 0, 0, 0, 0, 0, 0, 1021, 0,
	0, 0, 0, 0, 916, 917, 260, 0, 920, 963,
	0, 965, 966, 923, 923, 923, 0, 0, 398, 0,
	475, 474, 484, 485, 477, 478, 479, 480, 481, 482,
	483, 476, 467, 0, 486, 0, 132, 0, 0, 980,
	0, 0, 398, 0, 0, 0, 986, 0, 19, 39,
	21, 22, 0, 0, 0, 0, 0, 0, 0, 263,
	258, 0, 0, 0, 279, 510, 33, 133, 0, 0,
	0, 23, 519, 0, 133, 388, 133, 0, 0, 0,
	0, 1003, 0, 0, 1006, 0, 0, 0, 0, 0,
	882, 32, 857, 0, 0, 41, 133, 0, 133, 0,
	0, 133, 0, 398, 133, 0, 458, 0, 1024, 1025,
	475, 474, 484, 485, 477, 478, 479, 480, 481, 482,
	483, 476, 271, 0, 486, 987, 988, 0, 0, 989,
	0, 0, 284, 582, 285, 0, 0, 0, 290, 0,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 25, 26, 28, 27, 30, 0,
	0, 1005, 0, 0, 0, 0, 0, 31, 34, 35,
	0, 0, 36, 37, 29, 0, 0, 0, 0, 0,
	0, 133, 0, 272, 133, 133, 133, 0, 133, 0,
	0, 0, 0, 650, 651, 567, 657, 658, 0, 133,
	801, 0, 388, 0, 0, 0, 133, 133, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 458, 0,
	475, 474, 484, 485, 477, 478, 479, 480, 481, 482,
	483, 476, 0, 0, 486, 40, 0, 0, 0, 0,
	0, 0, 510, 0, 0, 702, 703, 475, 474, 484,
	485, 477, 478, 479, 480, 481, 482, 483, 476, 367,
	0, 486, 133, 0, 0, 357, 0, 133, 390, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 0,
	450, 0, 0, 453, 0, 0, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 696, 458, 0, 0, 0, 696, 696, 0,
	0, 696, 0, 0, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 696, 696, 696, 696, 0,
	0, 0, 0, 0, 0, 0, 426, 0, 0, 0,
	696, 0, 0, 272, 0, 0, 431, 432, 433, 434,
	435, 436, 437, 552, 438, 439, 440, 441, 442, 427,
	428, 429, 430, 412, 413, 0, 0, 415, 0, 416,
	417, 418, 419, 420, 421, 422, 423, 424, 425, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 824,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 0, 0, 646,
	510, 0, 647, 470, 0, 473, 0, 842, 0, 0,
	844, 487, 488, 489, 490, 491, 492, 493, 0, 471,
	472, 469, 475, 474, 484, 485, 477, 478, 479, 480,
	481, 482, 483, 476, 0, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 696, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	696, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 808, 0, 0,
	0, 0, 77, 0, 907, 133, 0, 0, 0, 0,
	85, 0, 0, 104, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 810, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 133, 0, 463, 462, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 0, 0,
	696, 0, 0, 0, 0, 0, 458, 696, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 954,
	0, 0, 0, 0, 0, 136, 0, 133, 0, 0,
	99, 0, 0, 0, 73, 0, 103, 97, 0, 0,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 70, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 0, 0,
	105, 114, 123, 0, 0, 118, 119, 120, 93, 71,
	0, 0, 0, 0, 1000, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 830, 64, 0, 84, 121, 100,
	79, 115, 0, 0, 0, 0, 0, 0, 221, 211,
	184, 223, 161, 175, 231, 177, 178, 205, 149, 192,
	96, 173, 0, 164, 144, 170, 145, 162, 186, 77,
	189, 160, 213, 195, 176, 143, 229, 85, 200, 0,
	104, 92, 272, 0, 188, 215, 190, 210, 183, 206,
	154, 199, 224, 174, 203, 225, 877, 0, 0, 62,
	878, 590, 591, 0, 0, 0, 0, 0, 72, 0,
	202, 220, 172, 204, 142, 201, 0, 147, 150, 230,
	218, 167, 168, 755, 0, 0, 0, 0, 0, 0,
	187, 191, 207, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 198, 0, 0, 0, 151, 148,
	0, 185, 0, 0, 0, 153, 0, 166, 208, 0,
	216, 182, 136, 219, 180, 179, 222, 99, 214, 163,
	171, 73, 169, 103, 97, 0, 197, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 146, 0, 105, 114, 123,
	159, 217, 118, 119, 120, 93, 71, 157, 158, 155,
	156, 193, 194, 226, 227, 228, 209, 152, 0, 0,
	212, 196, 64, 0, 84, 121, 100, 79, 115, 221,
	211, 184, 223, 161, 175, 231, 177, 178, 205, 149,
	192, 96, 173, 0, 164, 144, 170, 145, 162, 186,
	77, 189, 160, 213, 195, 176, 143, 229, 85, 200,
	0, 104, 92, 0, 0, 188, 215, 190, 210, 183,
	206, 154, 199, 224, 174, 203, 225, 0, 0, 0,
	62, 0, 590, 591, 0, 0, 0, 0, 0, 72,
	0, 202, 220, 172, 204, 142, 201, 0, 147, 150,
	230, 218, 167, 168, 0, 0, 0, 0, 0, 0,
	0, 187, 191, 207, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 198, 0, 0, 0, 151,
	148, 0, 185, 0, 0, 0, 153, 0, 166, 208,
	0, 216, 182, 136, 219, 180, 179, 222, 99, 214,
	163, 171, 73, 169, 103, 97, 0, 197, 98, 102,
	86, 108, 66, 112, 106, 90, 81, 82, 65, 0,
	101, 76, 80, 75, 95, 109, 110, 74, 122, 69,
	117, 68, 70, 116, 94, 107, 113, 91, 88, 67,
	111, 89, 87, 83, 78, 0, 146, 0, 105, 114,
	123, 159, 217, 118, 119, 120, 93, 71, 157, 158,
	155, 156, 193, 194, 226, 227, 228, 209, 152, 0,
	0, 212, 196, 64, 0, 84, 121, 100, 79, 115,
	221, 211, 184, 223, 161, 175, 231, 177, 178, 205,
	149, 192, 96, 173, 0, 164, 144, 170, 145, 162,
	186, 77, 189, 160, 213, 195, 176, 143, 229, 85,
	200, 0, 104, 92, 0, 0, 188, 215, 190, 210,
	183, 206, 154, 199, 224, 174, 203, 225, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 202, 220, 172, 204, 142, 201, 0, 147,
	150, 230, 218, 167, 168, 0, 0, 0, 0, 0,
	0, 0, 187, 191, 207, 181, 0, 0, 0, 0,
	0, 0, 976, 0, 165, 0, 198, 0, 0, 0,
	151, 148, 0, 185, 0, 0, 0, 153, 0, 166,
	208, 0, 216, 182, 136, 219, 180, 179, 222, 99,
	214, 163, 171, 73, 169, 103, 97, 0, 197, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 146, 0, 105,
	114, 123, 159, 217, 118, 119, 120, 93, 71, 157,
	158, 155, 156, 193, 194, 226, 227, 228, 209, 152,
	0, 0, 212, 196, 64, 0, 84, 121, 100, 79,
	115, 221, 211, 184, 223, 161, 175, 231, 177, 178,
	205, 149, 192, 96, 173, 0, 164, 144, 170, 145,
	162, 186, 77, 189, 160, 213, 195, 176, 143, 229,
	85, 200, 0, 104, 92, 0, 0, 188, 215, 190,
	210, 183, 206, 154, 199, 224, 174, 203, 225, 41,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 202, 220, 172, 204, 142, 201, 0,
	147, 150, 230, 218, 167, 168, 0, 0, 0, 0,
	0, 0, 0, 187, 191, 207, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 198, 0, 0,
	0, 151, 148, 0, 185, 0, 0, 0, 153, 0,
	166, 208, 0, 216, 182, 136, 219, 180, 179, 222,
	99, 214, 163, 171, 73, 169, 103, 97, 0, 197,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 70, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 146, 0,
	105, 114, 123, 159, 217, 118, 119, 120, 93, 71,
	157, 158, 155, 156, 193, 194, 226, 227, 228, 209,
	152, 0, 0, 212, 196, 64, 0, 84, 121, 100,
	79, 115, 221, 211, 184, 223, 161, 175, 231, 177,
	178, 205, 149, 192, 96, 173, 0, 164, 144, 170,
	145, 162, 186, 77, 189, 160, 213, 195, 176, 143,
	229, 85, 200, 0, 104, 92, 0, 0, 188, 215,
	190, 210, 183, 206, 154, 199, 224, 174, 203, 225,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 202, 220, 172, 204, 142, 201,
	0, 147, 150, 230, 218, 167, 168, 0, 0, 0,
	0, 0, 0, 0, 187, 191, 207, 181, 0, 0,
	0, 0, 0, 0, 888, 0, 165, 0, 198, 0,
	0, 0, 151, 148, 0, 185, 0, 0, 0, 153,
	0, 166, 208, 0, 216, 182, 136, 219, 180, 179,
	222, 99, 214, 163, 171, 73, 169, 103, 97, 0,
	197, 98, 102, 86, 108, 66, 112, 106, 90, 81,
	82, 65, 0, 101, 76, 80, 75, 95, 109, 110,
	74, 122, 69, 117, 68, 70, 116, 94, 107, 113,
	91, 88, 67, 111, 89, 87, 83, 78, 0, 146,
	0, 105, 114, 123, 159, 217, 118, 119, 120, 93,
	71, 157, 158, 155, 156, 193, 194, 226, 227, 228,
	209, 152, 0, 0, 212, 196, 64, 0, 84, 121,
	100, 79, 115, 221, 211, 184, 223, 161, 175, 231,
	177, 178, 205, 149, 192, 96, 173, 0, 164, 144,
	170, 145, 162, 186, 77, 189, 160, 213, 195, 176,
	143, 229, 85, 200, 0, 104, 92, 0, 0, 188,
	215, 190, 210, 183, 206, 154, 199, 224, 174, 203,
	225, 0, 0, 0, 62, 0, 397, 0, 0, 0,
	0, 0, 0, 72, 0, 202, 220, 172, 204, 142,
	201, 0, 147, 150, 230, 218, 167, 168, 0, 0,
	0, 0, 0, 0, 0, 187, 191, 207, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 198,
	0, 0, 0, 151, 148, 0, 185, 0, 0, 0,
	153, 0, 166, 208, 0, 216, 182, 136, 219, 180,
	179, 222, 99, 214, 163, 171, 73, 169, 103, 97,
	0, 197, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 70, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	146, 0, 105, 114, 123, 159, 217, 118, 119, 120,
	93, 71, 157, 158, 155, 156, 193, 194, 226, 227,
	228, 209, 152, 0, 0, 212, 196, 64, 0, 84,
	121, 100, 79, 115, 221, 211, 184, 223, 161, 175,
	231, 177, 178, 205, 149, 192, 96, 173, 0, 164,
	144, 170, 145, 162, 186, 77, 189, 160, 213, 195,
	176, 143, 229, 85, 200, 0, 104, 92, 0, 0,
	188, 215, 190, 210, 183, 206, 154, 199, 224, 174,
	203, 225, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 202, 220, 172, 204,
	142, 201, 0, 147, 150, 230, 218, 167, 168, 0,
	0, 0, 0, 0, 0, 0, 187, 191, 207, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	198, 0, 0, 0, 151, 148, 0, 185, 0, 0,
	0, 153, 0, 166, 208, 0, 216, 182, 136, 219,
	180, 179, 222, 99, 214, 163, 171, 73, 169, 103,
	97, 0, 197, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 146, 0, 105, 114, 123, 159, 217, 118, 119,
	120, 93, 71, 157, 158, 155, 156, 193, 194, 226,
	227, 228, 209, 152, 0, 0, 212, 196, 64, 0,
	84, 121, 100, 79, 115, 221, 211, 184, 223, 161,
	175, 231, 177, 178, 205, 149, 192, 96, 173, 0,
	164, 144, 170, 145, 162, 186, 77, 189, 160, 213,
	195, 176, 143, 229, 85, 200, 0, 104, 92, 0,
	0, 188, 215, 190, 210, 183, 206, 154, 199, 224,
	174, 203, 225, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 202, 220, 172,
	204, 142, 201, 0, 147, 150, 230, 218, 167, 168,
	0, 0, 0, 0, 0, 0, 0, 187, 191, 207,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 198, 0, 0, 0, 151, 148, 0, 185, 0,
	0, 0, 153, 0, 166, 208, 0, 216, 182, 136,
	219, 180, 179, 222, 99, 214, 163, 171, 73, 169,
	103, 97, 0, 197, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 146, 0, 105, 114, 123, 159, 217, 118,
	119, 120, 93, 71, 157, 158, 155, 156, 193, 194,
	226, 227, 228, 209, 152, 0, 0, 212, 196, 64,
	0, 84, 121, 100, 79, 115, 221, 211, 184, 223,
	161, 175, 231, 177, 178, 205, 149, 192, 96, 173,
	0, 164, 144, 170, 145, 162, 186, 77, 189, 160,
	213, 195, 176, 143, 229, 85, 200, 0, 104, 92,
	0, 0, 188, 215, 190, 210, 183, 206, 154, 199,
	224, 174, 203, 225, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 202, 220,
	172, 204, 142, 201, 0, 147, 150, 230, 218, 167,
	168, 0, 0, 0, 0, 0, 0, 0, 187, 191,
	207, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 198, 0, 0, 0, 151, 148, 0, 185,
	0, 0, 0, 153, 0, 166, 208, 0, 216, 182,
	136, 219, 180, 179, 222, 99, 214, 163, 171, 73,
	169, 103, 97, 0, 197, 98, 102, 86, 108, 66,
	112, 106, 90, 81, 82, 65, 0, 101, 76, 80,
	75, 95, 109, 110, 74, 122, 69, 117, 68, 70,
	116, 94, 107, 113, 91, 88, 67, 111, 89, 87,
	83, 78, 0, 146, 0, 105, 114, 123, 159, 217,
	118, 119, 120, 93, 71, 157, 158, 155, 156, 193,
	194, 226, 227, 228, 209, 152, 0, 0, 212, 196,
	64, 0, 84, 121, 100, 79, 115, 221, 211, 184,
	223, 161, 175, 231, 177, 178, 205, 149, 192, 96,
	173, 0, 164, 144, 170, 145, 162, 186, 77, 189,
	160, 213, 195, 176, 143, 229, 85, 200, 0, 104,
	92, 0, 0, 188, 215, 190, 210, 183, 206, 154,
	199, 224, 174, 203, 225, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 202,
	220, 172, 204, 142, 201, 0, 147, 150, 230, 218,
	167, 168, 0, 0, 0, 0, 0, 0, 0, 187,
	191, 207, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 198, 0, 0, 0, 151, 148, 0,
	185, 0, 0, 0, 153, 0, 166, 208, 0, 216,
	182, 136, 219, 180, 179, 222, 99, 214, 163, 171,
	73, 169, 103, 97, 0, 197, 98, 102, 86, 108,
	66, 112, 106, 90, 81, 82, 65, 0, 101, 76,
	80, 75, 95, 109, 110, 74, 122, 69, 117, 68,
	70, 116, 94, 107, 113, 91, 88, 67, 111, 89,
	87, 83, 78, 0, 146, 0, 105, 114, 123, 159,
	217, 118, 119, 120, 93, 71, 157, 158, 155, 156,
	193, 194, 226, 227, 228, 209, 152, 0, 0, 212,
	196, 64, 0, 84, 121, 100, 79, 115, 96, 0,
	0, 691, 0, 304, 0, 0, 0, 77, 0, 303,
	0, 0, 0, 0, 342, 85, 0, 0, 104, 92,
	0, 0, 0, 0, 335, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 273, 322, 321,
	324, 325, 326, 327, 0, 0, 72, 323, 328, 329,
	330, 0, 0, 301, 315, 0, 341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 313, 694, 0,
	0, 0, 353, 0, 314, 0, 0, 310, 311, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 351, 0, 99, 0, 0, 0, 73,
	0, 103, 97, 0, 0, 98, 102, 86, 108, 66,
	112, 106, 90, 81, 82, 65, 0, 101, 76, 80,
	75, 95, 109, 110, 74, 122, 69, 117, 68, 70,
	116, 94, 107, 113, 91, 88, 67, 111, 89, 87,
	83, 78, 0, 0, 0, 105, 114, 123, 0, 0,
	118, 119, 120, 93, 71, 343, 352, 349, 350, 347,
	348, 346, 345, 344, 354, 337, 338, 340, 0, 339,
	64, 0, 84, 121, 100, 79, 115, 96, 0, 0,
	0, 0, 304, 0, 0, 0, 77, 0, 303, 0,
	0, 0, 0, 342, 85, 0, 0, 104, 92, 0,
	0, 0, 0, 335, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 273, 322, 321, 324,
	325, 326, 327, 0, 0, 72, 323, 328, 329, 330,
	0, 0, 301, 315, 0, 341, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 313, 694, 0, 0,
	0, 353, 0, 314, 0, 0, 310, 311, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 351, 0, 99, 0, 0, 0, 73, 0,
	103, 97, 0, 0, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 0, 0, 105, 114, 123, 0, 0, 118,
	119, 120, 93, 71, 343, 352, 349, 350, 347, 348,
	346, 345, 344, 354, 337, 338, 340, 0, 339, 64,
	0, 84, 121, 100, 79, 115, 96, 0, 0, 0,
	0, 304, 0, 0, 0, 77, 0, 303, 0, 0,
	0, 0, 342, 85, 0, 0, 104, 92, 0, 0,
	0, 0, 335, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 295, 273, 322, 321, 324, 325,
	326, 327, 0, 0, 72, 323, 328, 329, 330, 0,
	0, 301, 315, 0, 341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 313, 0, 0, 0, 0,
	353, 0, 314, 0, 0, 310, 311, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 351, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 0, 0, 118, 119,
	120, 93, 71, 343, 352, 349, 350, 347, 348, 346,
	345, 344, 354, 337, 338, 340, 19, 339, 64, 0,
	84, 121, 100, 79, 115, 0, 0, 96, 0, 0,
	0, 0, 304, 0, 0, 0, 77, 0, 303, 0,
	0, 0, 0, 342, 85, 0, 0, 104, 92, 0,
	0, 0, 0, 335, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 273, 322, 321, 324,
	325, 326, 327, 0, 0, 72, 323, 328, 329, 330,
	0, 0, 301, 315, 0, 341, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 313, 0, 0, 0,
	0, 353, 0, 314, 0, 0, 310, 311, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 351, 0, 99, 0, 0, 0, 73, 0,
	103, 97, 0, 0, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 0, 0, 105, 114, 123, 0, 0, 118,
	119, 120, 93, 71, 343, 352, 349, 350, 347, 348,
	346, 345, 344, 354, 337, 338, 340, 0, 339, 64,
	0, 84, 121, 100, 79, 115, 96, 0, 0, 0,
	0, 304, 0, 0, 0, 77, 0, 303, 0, 0,
	0, 0, 342, 85, 0, 0, 104, 92, 0, 0,
	0, 0, 335, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 273, 322, 321, 324, 325,
	326, 327, 0, 0, 72, 323, 328, 329, 330, 0,
	0, 301, 315, 0, 341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 313, 0, 0, 0, 0,
	353, 0, 314, 0, 0, 310, 311, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 351, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 0, 0, 118, 119,
	120, 93, 71, 343, 352, 349, 350, 347, 348, 346,
	345, 344, 354, 337, 338, 340, 96, 339, 64, 0,
	84, 121, 100, 79, 115, 77, 0, 0, 0, 0,
	0, 0, 342, 85, 0, 0, 104, 92, 0, 0,
	0, 0, 335, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 273, 322, 321, 324, 325,
	326, 327, 0, 0, 72, 323, 328, 329, 330, 0,
	0, 0, 315, 0, 341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 313, 0, 0, 0, 0,
	353, 0, 314, 0, 0, 310, 311, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 351, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 1022, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 0, 0, 118, 119,
	120, 93, 71, 343, 352, 349, 350, 347, 348, 346,
	345, 344, 354, 337, 338, 340, 96, 339, 64, 0,
	84, 121, 100, 79, 115, 77, 0, 0, 0, 0,
	0, 0, 342, 85, 0, 0, 104, 92, 0, 0,
	0, 0, 335, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 273, 322, 321, 324, 325,
	326, 327, 0, 0, 72, 323, 328, 329, 330, 0,
	0, 0, 315, 0, 341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 313, 0, 0, 0, 0,
	353, 0, 314, 0, 0, 310, 311, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 351, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 0, 0, 118, 119,
	120, 93, 71, 343, 352, 349, 350, 347, 348, 346,
	345, 344, 354, 337, 338, 340, 96, 339, 64, 0,
	84, 121, 100, 79, 115, 77, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 104, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	475, 474, 484, 485, 477, 478, 479, 480, 481, 482,
	483, 476, 0, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 96, 0, 118, 119,
	120, 93, 71, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 104, 92, 64, 0,
	84, 121, 100, 79, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 57, 0,
	0, 0, 60, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 0, 19, 118, 119,
	120, 93, 71, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 64, 0,
	84, 121, 100, 79, 115, 85, 0, 0, 104, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 99, 0, 0, 0, 73,
	0, 103, 97, 0, 0, 98, 102, 86, 108, 66,
	112, 106, 90, 81, 82, 65, 0, 101, 76, 80,
	75, 95, 109, 110, 74, 122, 69, 117, 68, 70,
	116, 94, 107, 113, 91, 88, 67, 111, 89, 87,
	83, 78, 0, 0, 0, 105, 114, 123, 0, 19,
	118, 119, 120, 93, 71, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	64, 0, 84, 121, 100, 79, 115, 85, 0, 0,
	104, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 99, 0, 0,
	0, 73, 0, 103, 97, 0, 0, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 0, 0, 105, 114, 123,
	96, 0, 118, 119, 120, 93, 71, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	104, 92, 64, 0, 84, 121, 100, 79, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 543, 0, 0, 544, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 99, 0, 0,
	0, 73, 0, 103, 97, 0, 0, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 0, 0, 105, 114, 123,
	0, 0, 118, 119, 120, 93, 71, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 387, 0, 0, 0,
	0, 77, 64, 0, 84, 121, 100, 79, 115, 85,
	0, 0, 104, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 389, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 99,
	0, 0, 0, 73, 0, 103, 97, 0, 0, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 0, 0, 105,
	114, 123, 96, 0, 118, 119, 120, 93, 71, 0,
	0, 77, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 104, 92, 64, 0, 84, 121, 100, 79,
	115, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 99,
	0, 0, 0, 73, 0, 103, 97, 0, 0, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 0, 0, 105,
	114, 123, 96, 0, 118, 119, 120, 93, 71, 0,
	0, 77, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 104, 92, 64, 0, 84, 121, 100, 79,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 810, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 99,
	0, 0, 0, 73, 0, 103, 97, 0, 0, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 0, 0, 105,
	114, 123, 96, 0, 118, 119, 120, 93, 71, 0,
	0, 77, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 104, 92, 64, 0, 84, 121, 100, 79,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 389, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 99,
	0, 0, 0, 73, 0, 103, 97, 0, 0, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 0, 0, 105,
	114, 123, 96, 0, 118, 119, 120, 93, 71, 0,
	366, 77, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 104, 92, 64, 0, 84, 121, 100, 79,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 99,
	0, 0, 0, 73, 0, 103, 97, 0, 0, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 0, 0, 105,
	114, 123, 0, 0, 118, 119, 120, 93, 71, 261,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 64, 77, 84, 121, 100, 79,
	115, 0, 0, 85, 0, 0, 104, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 96, 0, 118, 119,
	120, 93, 71, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 104, 92, 64, 0,
	84, 121, 100, 79, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 136, 0,
	0, 0, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 96, 0, 118, 119,
	120, 93, 71, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 104, 92, 64, 0,
	84, 121, 100, 79, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 96, 0, 118, 119,
	120, 93, 71, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 104, 92, 64, 0,
	84, 121, 100, 79, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 96, 0, 118, 119,
	120, 93, 71, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 104, 92, 64, 0,
	84, 121, 100, 79, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 96, 0, 118, 119,
	120, 93, 71, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 104, 92, 64, 0,
	84, 121, 100, 79, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 267, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 0, 0, 118, 119,
	120, 268, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	84, 121, 100, 79, 115,
}
var yyPact = [...]int{

	1072, -1000, -147, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 656, 690, -1000,
	-1000, -1000, -1000, -1000, 482, 5219, -6, 50, 34, 6869,
	48, 3572, 7349, -1000, -1000, -1000, -1000, -1000, 457, -1000,
	-1000, -1000, -1000, -1000, 646, 653, 461, 638, 572, -1000,
	9, 6055, 6709, 7509, -1000, 313, 46, 7349, -110, -10,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 28, 7349, -1000, 7349, -11, 302,
	-11, 7349, -1000, 68, -1000, -1000, -1000, 7349, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 287, 614,
	4519, 4519, 656, -1000, 457, -1000, -1000, -1000, 602, -1000,
	-1000, 178, 6535, 480, 576, -1000, -1000, -1000, 635, 5563,
	5895, 7349, 390, -1000, 2768, 380, -1000, 607, -1000, -1000,
	129, -1000, 67, -1000, -1000, 370, -1000, 1258, 278, 2366,
	19, 7349, 151, 7349, 2366, 11, 7349, 633, 500, 7349,
	-1000, 3371, -1000, -1000, -1000, -1000, -1000, 684, 115, 220,
	-1000, 4519, 1421, 415, 415, -1000, -1000, 58, -1000, -1000,
	4879, 4879, 4879, 4879, 4879, 4879, 4879, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 415, 66, -1000, 4330, 415, 415, 415, 415, 415,
	415, 4519, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 411, -1000, 212, 646, 287,
	572, 5723, 519, -1000, -1000, 422, 7349, -1000, 7189, 6055,
	6055, 6055, 615, 6055, -1000, 564, 555, -1000, -1000, 530,
	7349, -1000, 365, 287, 5563, 100, -1000, 6375, -1000, -1000,
	662, 6055, 7349, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	7189, -1000, 4519, 3170, 1964, 80, 174, -80, -1000, -1000,
	417, -1000, 417, 417, 417, 417, -60, -60, -60, -60,
	-1000, -1000, -1000, -1000, -1000, 474, -1000, 417, 417, 417,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 463, 463,
	463, 425, 425, 478, -1000, -1000, -1000, 7349, -1000, 619,
	44, -1000, 7349, -1000, -1000, 7349, 2366, -1000, -1000, -1000,
	-1000, 577, 4519, 4519, 261, 4519, 4519, 121, 4879, 226,
	138, 4879, 4879, 4879, 4879, 4879, 4879, 4879, 4879, 4879,
	4879, 4879, 4879, 4879, 4879, 4879, 217, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 275, -1000, 457, 487, 487,
	96, 96, 96, 96, 96, 96, 5059, 3761, 3170, 362,
	143, 4330, 3950, 3950, 4519, 4519, 3950, 640, 146, 143,
	7029, -1000, 287, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3950, 3950, 3950, 3950, 4519, -1000, -1000, -1000, 614, -1000,
	640, 651, -1000, 583, 582, 3950, -1000, 492, 7189, 415,
	-1000, 5391, -1000, 394, 576, 469, 491, 559, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 524, 523, -1000, -1000, -1000,
	287, -1000, 45, 29, 25, -1000, 656, 4519, 387, -1000,
	-1000, -1000, 143, -1000, 65, -1000, 408, 1763, -1000, -1000,
	-1000, -1000, -1000, -1000, 462, 625, 106, 270, -1000, -1000,
	610, -1000, 158, -82, -1000, -1000, 225, -60, -60, -1000,
	-1000, 91, 604, 91, 91, 91, 237, -1000, -1000, -1000,
	-1000, 211, -1000, -1000, -1000, 197, -1000, 488, 7029, 2366,
	-1000, -1000, 113, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -28, -1000, 2366, -1000, 571,
	121, 147, -1000, -1000, 326, -1000, -1000, 143, 143, 1186,
	-1000, -1000, -1000, -1000, 226, 4879, 4879, 4879, 90, 1186,
	1159, 584, 489, 96, 153, 153, 95, 95, 95, 95,
	95, 166, 166, -1000, -1000, -1000, 287, -1000, -1000, -1000,
	287, 3950, 407, -1000, -1000, 1556, 64, 415, 4519, -1000,
	327, 327, 240, 297, 327, 3950, 139, -1000, 4519, 287,
	-1000, 327, 287, 327, 327, -1000, -1000, 7349, -1000, -1000,
	-1000, -1000, 412, -1000, 627, 395, 393, -1000, -1000, 4139,
	287, 360, 63, 656, -1000, -1000, 4519, 460, -1000, 4519,
	6055, -1000, 552, -1000, 536, -1000, 415, 415, 415, 646,
	143, -1000, 2969, 1964, -1000, 1964, 7029, -1000, 246, -1000,
	-1000, 485, 26, -1000, -1000, -1000, 336, 91, 91, -1000,
	241, 137, -1000, -1000, -1000, 356, -1000, 406, 348, 7349,
	-1000, -1000, -1000, 7349, -1000, -1000, -1000, -1000, -1000, 7029,
	-1000, -1000, -1000, -1000, -1000, -1000, 90, 1186, 1049, -1000,
	4879, 4879, -1000, -1000, 327, 3950, -1000, -1000, 6215, -1000,
	-1000, 2567, 3950, 143, -1000, -1000, -14, 217, -14, -118,
	382, 132, -1000, 4519, 286, -1000, -1000, -1000, -1000, -1000,
	-1000, 662, 6055, 623, -1000, 415, -1000, -1000, 505, 7029,
	7029, 646, 143, 7029, 143, 477, -1000, -1000, 7029, 7029,
	7029, -1000, -1000, 1763, -1000, 310, -1000, 417, -1000, -76,
	683, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 235, 188, -1000, 185, 2366, -1000, -1000,
	629, -1000, 4879, 1186, 1186, -1000, -1000, -1000, -1000, 62,
	287, 287, 417, 417, -1000, 417, 425, -1000, 417, -41,
	417, -42, 287, 287, 415, -115, -1000, 143, 4519, 660,
	404, 680, -1000, 415, -1000, 457, 61, -1000, -1000, 307,
	-1000, -1000, 262, -1000, 262, 262, -1000, 7029, -1000, 83,
	-1000, -93, -1000, 334, 322, -1000, 415, 1186, 2165, -1000,
	-1000, -1000, 41, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4879, 287, 230, 143, 658, 648, 7189, 393, 287,
	7029, 7029, -1000, -1000, 7029, -1000, -1000, -1000, 175, 616,
	-1000, 613, -1000, -1000, -1000, -29, -1000, -1000, -1000, 27,
	-1000, -1000, -1000, 4519, 4519, 380, -1000, -1000, -1000, -1000,
	-1000, 228, -1000, -1000, 259, -1000, 7029, 287, 32, -126,
	143, 358, -1000, -1000, -29, 580, -1000, 562, -122, -133,
	-1000, -32, -1000, 495, -1000, -34, -124, 415, -127, 4699,
	-134, 959, 287, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 900, 14, 578, 899, 895, 893, 892, 889, 888,
	887, 885, 884, 883, 881, 880, 875, 873, 871, 864,
	66, 862, 852, 843, 54, 837, 57, 822, 816, 30,
	180, 28, 26, 760, 815, 21, 36, 61, 814, 12,
	813, 811, 808, 805, 43, 804, 802, 1036, 801, 799,
	798, 18, 13, 797, 795, 794, 793, 41, 8, 792,
	791, 790, 789, 788, 786, 34, 2, 5, 25, 19,
	785, 257, 6, 784, 37, 783, 781, 780, 779, 29,
	774, 45, 771, 17, 40, 768, 766, 35, 10, 764,
	44, 762, 557, 759, 108, 758, 756, 755, 754, 753,
	752, 67, 16, 194, 22, 31, 751, 750, 844, 23,
	55, 745, 742, 27, 75, 20, 32, 740, 739, 738,
	737, 736, 735, 733, 24, 732, 731, 730, 11, 51,
	729, 728, 56, 7, 725, 724, 722, 721, 50, 720,
	38, 719, 718, 717, 33, 9, 716, 3, 710, 709,
	4, 708, 707, 706, 704, 702, 0, 116, 700, 696,
	156,
}
var yyR1 = [...]int{

	0, 154, 155, 155, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 23, 23,
	7, 8, 8, 158, 158, 42, 42, 9, 9, 89,
	89, 89, 107, 107, 10, 10, 10, 10, 15, 141,
	142, 142, 142, 138, 118, 118, 118, 121, 121, 119,
	119, 119, 119, 119, 119, 119, 120, 120, 120, 120,
	120, 122, 122, 122, 122, 122, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	137, 137, 124, 124, 132, 132, 133, 133, 133, 130,
	130, 131, 131, 134, 134, 134, 125, 125, 125, 125,
	125, 125, 127, 127, 135, 135, 128, 128, 128, 129,
	129, 136, 136, 136, 136, 136, 126, 126, 139, 146,
	146, 146, 146, 140, 140, 148, 148, 147, 143, 143,
	143, 144, 144, 144, 145, 145, 145, 11, 11, 11,
	11, 11, 151, 149, 149, 150, 150, 12, 13, 13,
	13, 14, 14, 16, 117, 117, 117, 17, 18, 18,
	19, 19, 19, 19, 19, 159, 20, 21, 21, 22,
	22, 22, 26, 26, 26, 24, 24, 25, 25, 31,
	31, 30, 30, 32, 32, 32, 32, 106, 106, 106,
	105, 105, 34, 34, 35, 35, 36, 36, 37, 37,
	37, 49, 86, 86, 38, 38, 38, 38, 152, 152,
	153, 153, 153, 39, 39, 40, 40, 41, 41, 112,
	112, 111, 111, 111, 110, 110, 43, 43, 43, 45,
	44, 44, 44, 44, 46, 46, 48, 48, 47, 47,
	50, 50, 50, 50, 51, 51, 52, 52, 33, 33,
	33, 33, 33, 33, 33, 93, 93, 54, 54, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 64,
	64, 64, 64, 64, 64, 55, 55, 55, 55, 55,
	55, 55, 29, 29, 65, 65, 65, 71, 66, 66,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 62, 62, 62, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 61, 61, 61, 61, 61, 61, 61,
	61, 160, 160, 63, 63, 63, 63, 27, 27, 27,
	27, 27, 115, 115, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 75, 75, 28,
	28, 73, 73, 74, 76, 76, 72, 72, 72, 57,
	57, 57, 57, 57, 57, 57, 57, 59, 59, 59,
	77, 77, 78, 78, 79, 79, 80, 80, 81, 82,
	82, 82, 83, 83, 83, 83, 84, 84, 84, 56,
	56, 56, 56, 56, 56, 85, 85, 85, 85, 87,
	87, 67, 67, 69, 69, 68, 70, 88, 88, 90,
	91, 91, 94, 94, 95, 95, 92, 92, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 97,
	97, 97, 98, 98, 99, 99, 99, 100, 100, 103,
	103, 104, 104, 108, 108, 109, 109, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 156, 157,
	113, 114, 114, 114,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 6, 7, 1, 1,
	8, 7, 6, 1, 1, 1, 3, 5, 3, 1,
	2, 1, 1, 1, 2, 8, 4, 6, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 4, 2,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	4, 5, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 3, 2, 3, 1, 1, 1, 3, 2, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 1, 3, 4, 4, 6, 3, 0, 1,
	0, 1, 1, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 1, 3, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -154, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -19, -3, -4, 6,
	-23, 8, 9, 29, -15, 112, 113, 115, 114, 132,
	116, 125, 49, 24, 126, 127, 130, 131, -156, 7,
	193, 53, -155, 206, -79, 14, -22, 5, -20, -159,
	-20, -20, -20, -20, -141, 53, -99, 119, 70, 117,
	123, -103, 56, -102, 199, 144, 138, 165, 157, 155,
	158, 183, 65, 128, 153, 149, 147, 26, 170, 204,
	148, 142, 143, 169, 201, 34, 136, 168, 164, 167,
	141, 163, 38, 182, 160, 150, 17, 131, 134, 124,
	203, 146, 135, 130, 37, 174, 140, 161, 137, 151,
	152, 166, 139, 162, 175, 205, 159, 156, 179, 180,
	181, 202, 154, 176, -92, 119, 121, 117, 117, 118,
	119, 117, -47, -108, 56, -102, 119, 117, -117, 56,
	-101, -102, 71, 32, 21, 23, 172, 74, 106, 15,
	75, 105, 194, 112, 47, 186, 187, 184, 185, 177,
	28, 9, 24, 126, 20, 99, 114, 78, 79, 129,
	22, 127, 69, 18, 50, 10, 31, 12, 13, 122,
	121, 90, 118, 45, 7, 108, 25, 87, 41, 27,
	43, 88, 16, 188, 189, 30, 198, 133, 101, 48,
	35, 72, 67, 51, 70, 14, 46, 89, 115, 193,
	44, 6, 197, 29, 125, 42, 117, 178, 77, 120,
	68, 5, 123, 8, 49, 52, 190, 191, 192, 33,
	76, 11, -108, -113, -113, -113, -113, -113, -2, -83,
	16, 15, -5, -3, -156, 6, 19, 20, -26, 39,
	40, -21, -92, -35, -36, -37, -38, -49, -71, -156,
	-47, 10, -42, -47, -89, -88, 183, 158, 182, -90,
	-72, -103, -108, 56, -102, -142, -138, 56, 118, -47,
	193, -95, 122, 117, -47, -47, -94, 122, 56, -94,
	-47, 109, -47, -113, -157, 55, -84, 18, 30, -33,
	-53, 72, -58, 28, 22, -57, -54, -72, -70, -71,
	106, 107, 95, 96, 103, 73, 108, -62, -60, -61,
	-63, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -103, -108, -68, -156, 43, 44, 194, 195, 198,
	196, 75, 33, 184, 192, 191, 190, 188, 189, 186,
	187, 122, 185, 101, 193, -80, -81, -33, -79, -2,
	-20, 35, -24, 20, 64, -48, 25, -47, 29, 54,
	-43, -45, -152, -46, 41, 45, 47, 42, 31, 48,
	-112, 21, -35, -2, -156, -111, -110, 21, -108, 58,
	-47, -158, 54, 10, 52, -107, -104, 58, -103, -101,
	54, 29, 80, 109, 55, 54, -118, -121, -123, -122,
	-119, -120, 155, 156, 106, 159, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 170, 128, 151, 152, 153,
	154, 138, 139, 140, 141, 142, 143, 144, 146, 147,
	148, 149, 150, 56, -114, -156, -104, 119, -47, 72,
	-47, -114, 120, -47, 22, 51, -47, -109, -108, -101,
	8, 90, 71, 70, 87, 54, 17, -33, -55, 90,
	72, 88, 89, 74, 92, 91, 102, 95, 96, 97,
	98, 99, 100, 101, 93, 94, 105, 80, 81, 82,
	83, 84, 85, 86, -93, -156, -71, -156, 110, 111,
	-58, -58, -58, -58, -58, -58, -58, -156, 109, -66,
	-33, -156, -156, -156, -156, -156, -156, -156, -75, -33,
	-156, -160, -156, -160, -160, -160, -160, -160, -160, -160,
	-156, -156, -156, -156, 54, -82, 23, 24, -83, -157,
	-26, -59, -103, 59, 62, -25, 42, -56, 29, 33,
	-2, -156, -47, -88, -36, -37, -37, -153, 19, 32,
	-37, 41, 41, 41, -44, 43, 44, -108, -157, -157,
	-2, -50, 49, 121, 50, -110, -52, 11, -35, -47,
	-113, -90, -33, -104, -109, -101, -143, -144, -145, -104,
	58, 59, -138, -139, -146, 124, 123, -140, 118, 27,
	-134, 67, 72, -130, 175, -124, 53, -124, -124, -124,
	-124, -128, 158, -128, -128, -128, 53, -124, -124, -124,
	-132, 53, -132, -132, -133, 53, -133, -100, 52, -47,
	22, -96, 115, -151, 113, 172, 158, 65, 28, 114,
	14, 194, 134, 205, 56, 135, -47, -47, -114, 37,
	-33, -33, -64, 67, 72, 68, 69, -33, -33, -58,
	-65, -68, -71, 63, 90, 88, 89, 74, -58, -58,
	-58, -58, -58, -58, -58, -58, -58, -58, -58, -58,
	-58, -58, -58, -115, 56, 58, 56, -57, -57, -103,
	-31, 20, -30, -32, 97, -33, -108, -104, 54, -157,
	-30, -30, -33, -33, -30, -24, -73, -74, 76, -103,
	-157, -30, -31, -30, -30, -81, -84, -91, 18, 10,
	33, 33, -30, -87, 51, -88, -67, -69, -68, -156,
	-2, -85, -103, -52, -40, -39, 51, 52, -41, 51,
	-44, 41, 46, 41, 46, -157, 118, 118, 118, -79,
	-33, -52, 109, 54, -145, 80, 53, 27, -140, 56,
	56, -125, 28, 67, -131, 176, 59, -128, -128, -129,
	105, 29, -129, -129, -129, -137, 58, 59, 59, 51,
	-103, -114, -113, -97, -98, 120, 21, 118, 27, 134,
	-114, 38, 67, 68, 69, -65, -58, -58, -58, -29,
	129, 71, -157, -157, -30, 54, -106, -105, 21, -103,
	58, 109, -156, -33, -157, -157, 54, 52, 21, -157,
	-30, -76, -74, 78, -33, -157, -157, -157, -157, -157,
	-47, -34, 10, 26, -87, 54, -157, -157, -157, 54,
	109, -79, -33, 53, -33, -36, 41, 41, -156, -156,
	-156, -83, -104, -144, -145, -148, -147, -103, 56, -127,
	51, 58, 59, 60, 67, 184, 55, -129, -129, 56,
	56, 106, 55, 54, 54, 55, 54, -47, -47, -113,
	-103, -29, 71, -58, -58, -157, -32, -105, 97, -109,
	-31, -116, 106, 155, 128, 153, 149, 169, 160, 174,
	151, 175, -115, -116, 199, -79, 79, -33, 77, -52,
	-35, 27, -69, 33, -2, -156, -103, -103, -83, -86,
	-103, -39, -51, -103, -51, -51, 55, 54, -124, -135,
	172, 8, 58, 59, 59, -114, 25, -58, 109, -157,
	-157, -124, -124, -124, -133, -124, 143, -124, 143, -157,
	-157, -156, -28, 197, -33, -77, 12, 8, -67, -2,
	109, 54, 55, -157, 54, -157, -157, -147, -136, 124,
	27, 123, 184, 55, 55, -156, 97, -128, 56, -58,
	-157, 58, -78, 13, 15, -88, -157, -103, -103, -103,
	-126, 65, 27, 27, -149, -150, 134, -27, 90, 202,
	-33, -66, 58, -157, 54, -103, -157, 200, 48, 203,
	-150, 33, 38, 201, 204, 136, 38, 137, 202, -156,
	203, -58, 133, 204, -157, -157,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 404, 0, 175,
	175, 175, 175, 175, 0, 464, 446, 0, 0, 0,
	0, 0, 169, 630, 630, 630, 630, 630, 0, 28,
	29, 628, 1, 3, 412, 0, 0, 179, 182, 177,
	446, 0, 0, 0, 44, 0, 0, 621, 0, 444,
	465, 466, 469, 470, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 626, 627, 0, 0, 447, 0, 442, 0,
	442, 0, 162, 248, 473, 474, 621, 0, 630, 164,
	165, 166, 477, 478, 479, 480, 481, 482, 483, 484,
	485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
	495, 496, 497, 498, 499, 500, 501, 502, 503, 504,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 526, 527, 528, 529, 530, 531, 532, 533, 534,
	535, 536, 537, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 168, 170, 171, 172, 173, 174, 22, 416,
	0, 0, 404, 24, 0, 175, 180, 181, 185, 183,
	184, 176, 0, 0, -2, 206, 207, 208, 229, 0,
	231, 0, 0, 35, 0, 38, -2, 573, -2, 437,
	0, 386, 0, -2, -2, 0, 50, 0, 0, 631,
	0, 0, 0, 0, 631, 0, 0, 0, 0, 0,
	161, 0, 163, 167, 23, 629, 18, 0, 0, 413,
	258, 0, 263, 265, 0, 300, 301, 302, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 327, 328, 329,
	330, 389, 390, 391, 392, 393, 394, 395, 396, 267,
	268, 386, 0, 436, 0, 0, 0, 0, 0, 0,
	0, 377, 0, 351, 351, 351, 351, 351, 351, 351,
	351, 0, 0, 0, 0, 405, 406, 409, 412, 22,
	182, 0, 187, 186, 178, 0, 0, 247, 0, 0,
	0, 0, 220, 0, 236, 0, 0, 239, 219, 0,
	0, 230, 0, 22, 0, 250, 232, 0, 234, 235,
	256, 0, 0, 33, 34, 630, 42, 43, 471, 472,
	0, 40, 0, 0, 138, 0, 103, 99, 55, 56,
	92, 58, 92, 92, 92, 92, 116, 116, 116, 116,
	84, 85, 86, 87, 88, 0, 71, 92, 92, 92,
	75, 59, 60, 61, 62, 63, 64, 65, 94, 94,
	94, 96, 96, 467, 46, 632, 633, 0, 48, 0,
	0, 150, 0, 158, 443, 0, 631, 249, 475, 476,
	417, 0, 0, 0, 0, 0, 0, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 290, 291, 264, 0, 278, 0, 0, 0,
	320, 321, 322, 323, 324, 325, 0, 189, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 185, 0, 378,
	0, 343, 0, 344, 345, 346, 347, 348, 349, 350,
	0, 189, 0, 0, 0, 408, 410, 411, 416, 25,
	185, 0, 397, 0, 0, 0, 188, 429, 0, 0,
	-2, 0, 246, 256, -2, 225, 227, 0, 221, 222,
	217, 237, 238, 244, 245, 0, 0, 209, 210, 297,
	22, 211, 0, 0, 0, 233, 404, 0, 256, 36,
	37, 438, 439, 387, 0, -2, 49, 139, 141, 144,
	145, 146, 51, 52, 0, 0, 0, 0, 133, 134,
	106, 104, 0, 101, 100, 57, 0, 116, 116, 78,
	79, 119, 0, 119, 119, 119, 0, 72, 73, 74,
	66, 0, 67, 68, 69, 0, 70, 0, 0, 631,
	445, 630, 459, 151, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 457, 458, 0, 157, 631, 160, 0,
	259, 260, 262, 279, 0, 281, 283, 414, 415, 269,
	270, 294, 295, 296, 0, 0, 0, 0, 292, 274,
	0, 305, 306, 307, 308, 309, 310, 311, 312, 313,
	314, 315, 316, 319, 362, 363, 0, 317, 318, 326,
	0, 0, 190, 191, 193, 197, 0, 387, 0, 435,
	0, 0, 0, 0, 0, 0, 384, 381, 0, 0,
	352, 0, 0, 0, 0, 407, 19, 0, 440, 441,
	398, 399, 202, 26, 0, 429, 419, 431, 433, 0,
	22, 0, 425, 404, 214, 226, 0, 0, 215, 0,
	0, 240, 0, 242, 0, -2, 0, 0, 0, 412,
	257, 32, 0, 0, 142, 0, 0, 129, 0, 131,
	132, 112, 0, 105, 54, 102, 0, 119, 119, 80,
	0, 0, 81, 82, 83, 0, 90, 0, 0, 0,
	468, 47, 147, 0, 630, 460, 461, 462, 463, 0,
	159, 418, 280, 282, 284, 271, 292, 275, 0, 272,
	0, 0, 266, 331, 0, 0, 194, 198, 0, 200,
	201, 0, 189, 299, 334, 335, 0, 0, 0, 0,
	404, 0, 382, 0, 0, 342, 353, 354, 355, 356,
	20, 256, 0, 0, 27, 0, 434, -2, 0, 0,
	0, 412, 223, 0, 228, 218, 241, 243, 0, 0,
	0, 31, 388, 140, 143, 0, 135, 92, 130, 114,
	0, 107, 108, 109, 110, 111, 93, 76, 77, 120,
	117, 118, 89, 0, 0, 97, 0, 631, 148, 149,
	0, 273, 0, 293, 276, 332, 192, 199, 195, 0,
	0, 0, 92, 92, 367, 92, 96, 370, 92, 372,
	92, 375, 0, 0, 0, 379, 341, 385, 0, 400,
	203, 0, 432, 0, -2, 0, 427, 426, 30, 0,
	212, 216, 0, 254, 0, 0, 128, 0, 137, 121,
	115, 0, 91, 0, 0, 45, 0, 277, 0, 333,
	336, 364, 116, 368, 369, 371, 373, 374, 376, 338,
	337, 0, 0, 0, 383, 402, 0, 0, 422, 22,
	0, 0, 224, 251, 0, 252, 253, 136, 126, 0,
	123, 125, 113, 95, 98, 0, 196, 365, 366, 357,
	340, 380, 21, 0, 0, 430, -2, 428, 213, 255,
	53, 0, 122, 124, 0, 153, 0, 0, 0, 0,
	403, 401, 127, 152, 0, 0, 339, 0, 0, 0,
	154, 0, 358, 0, 361, 0, 359, 0, 0, 0,
	0, 0, 0, 360, 155, 156,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 206,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:277
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:282
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:283
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:287
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:306
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:314
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:318
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:325
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:331
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:335
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:341
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:345
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:352
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:363
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:375
		{
			yyVAL.str = InsertStr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:379
		{
			yyVAL.str = ReplaceStr
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:385
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:391
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:395
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:400
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:401
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:405
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:409
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:415
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:419
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:430
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:434
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:440
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:445
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:450
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:454
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:460
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:467
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:474
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:479
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:483
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:489
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:500
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:510
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:515
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:663
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:668
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:673
		{
			yyVAL.optVal = nil
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:677
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:682
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:686
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:694
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:698
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:704
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:712
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:716
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:721
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:725
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:731
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:735
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:744
		{
			yyVAL.optVal = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:752
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:764
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:769
		{
			yyVAL.optVal = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:773
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:778
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:782
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:787
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:791
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:795
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:800
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:804
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:809
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:813
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:817
		{
			yyVAL.colKeyOpt = colKey
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:821
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:830
		{
			yyVAL.optVal = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:834
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:840
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:846
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:850
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:854
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:864
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:868
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:874
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:878
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:884
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:889
		{
			yyVAL.str = ""
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:893
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:897
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:905
		{
			yyVAL.str = yyDollar[1].str
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:909
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:913
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:919
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:923
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:927
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:933
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:937
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:942
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:947
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:951
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 152:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:957
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:963
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:967
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 155:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:973
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 156:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:977
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:983
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:989
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:997
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1002
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1031
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1040
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.statement = &OtherRead{}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.statement = &OtherRead{}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.statement = &OtherRead{}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1088
		{
			setAllowComments(yylex, true)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.bytes2 = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.str = UnionStr
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.str = UnionAllStr
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.str = UnionDistinctStr
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.str = SQLCacheStr
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.str = DistinctStr
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.str = StraightJoinHint
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.selectExprs = nil
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Global: yyDollar[2].boolVal, Type: yyDollar[3].str, Join: yyDollar[4].str, RightExpr: yyDollar[5].tableExpr, Condition: yyDollar[6].joinCondition}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.str = AllTypeStr
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.str = AnyTypeStr
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1318
		{
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1324
		{
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.empty = struct{}{}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.empty = struct{}{}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.str = JoinStr
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.str = JoinStr
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.str = JoinStr
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.str = StraightJoinStr
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.str = LeftJoinStr
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.str = LeftJoinStr
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.str = RightJoinStr
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.str = RightJoinStr
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.str = NaturalJoinStr
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1397
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.indexHints = nil
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.expr = nil
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.str = ""
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 277:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.str = IsNullStr
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.str = IsNotNullStr
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.str = IsTrueStr
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.str = IsNotTrueStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.str = IsFalseStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.str = IsNotFalseStr
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.str = EqualStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.str = LessThanStr
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.str = GreaterThanStr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.str = LessEqualStr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.str = GreaterEqualStr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.str = NotEqualStr
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.expr = nil
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1738
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1746
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1768
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 336:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 337:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 338:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 339:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.str = BooleanModeStr
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 360:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.str = QueryExpansionStr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.expr = nil
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.str = string("")
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = nil
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.expr = &NullVal{}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2089
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.exprs = nil
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.expr = nil
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.orderBy = nil
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.str = AscScr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.str = AscScr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.str = DescScr
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.limit = nil
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.str = ForUpdateStr
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.str = ShareModeStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2209
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2222
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.updateExprs = nil
		}
	case 430:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.byt = 0
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.byt = 1
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.str = ""
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.str = IgnoreStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.empty = struct{}{}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.empty = struct{}{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.empty = struct{}{}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.empty = struct{}{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.empty = struct{}{}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.empty = struct{}{}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.empty = struct{}{}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.empty = struct{}{}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2581
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2590
		{
			decNesting(yylex)
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2595
		{
			forceEOF(yylex)
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2600
		{
			forceEOF(yylex)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2604
		{
			forceEOF(yylex)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2608
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
